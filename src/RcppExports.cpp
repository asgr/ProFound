// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// interpolateAkimaGrid
void interpolateAkimaGrid(NumericVector x, NumericVector y, NumericMatrix grid, NumericMatrix output);
RcppExport SEXP _ProFound_interpolateAkimaGrid(SEXP xSEXP, SEXP ySEXP, SEXP gridSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type output(outputSEXP);
    interpolateAkimaGrid(x, y, grid, output);
    return R_NilValue;
END_RCPP
}
// interpolateLinearGrid
void interpolateLinearGrid(NumericVector xseq, NumericVector yseq, NumericMatrix tempmat_sky, NumericMatrix output);
RcppExport SEXP _ProFound_interpolateLinearGrid(SEXP xseqSEXP, SEXP yseqSEXP, SEXP tempmat_skySEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xseq(xseqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yseq(yseqSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tempmat_sky(tempmat_skySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type output(outputSEXP);
    interpolateLinearGrid(xseq, yseq, tempmat_sky, output);
    return R_NilValue;
END_RCPP
}
// profoundAperCover
NumericVector profoundAperCover(NumericVector x, NumericVector y, double cx, double cy, double rad, int depth, int nthreads);
RcppExport SEXP _ProFound_profoundAperCover(SEXP xSEXP, SEXP ySEXP, SEXP cxSEXP, SEXP cySEXP, SEXP radSEXP, SEXP depthSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< double >::type cy(cySEXP);
    Rcpp::traits::input_parameter< double >::type rad(radSEXP);
    Rcpp::traits::input_parameter< int >::type depth(depthSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(profoundAperCover(x, y, cx, cy, rad, depth, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// profoundAperWeight
NumericMatrix profoundAperWeight(NumericMatrix image, NumericVector cx, NumericVector cy, NumericVector rad, int depth, int nthreads);
RcppExport SEXP _ProFound_profoundAperWeight(SEXP imageSEXP, SEXP cxSEXP, SEXP cySEXP, SEXP radSEXP, SEXP depthSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type image(imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cy(cySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rad(radSEXP);
    Rcpp::traits::input_parameter< int >::type depth(depthSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(profoundAperWeight(image, cx, cy, rad, depth, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// profoundAperFlux
NumericVector profoundAperFlux(NumericMatrix image, NumericVector cx, NumericVector cy, NumericVector rad, bool deblend, int depth, int nthreads);
RcppExport SEXP _ProFound_profoundAperFlux(SEXP imageSEXP, SEXP cxSEXP, SEXP cySEXP, SEXP radSEXP, SEXP deblendSEXP, SEXP depthSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type image(imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cy(cySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rad(radSEXP);
    Rcpp::traits::input_parameter< bool >::type deblend(deblendSEXP);
    Rcpp::traits::input_parameter< int >::type depth(depthSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(profoundAperFlux(image, cx, cy, rad, deblend, depth, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// dilate_cpp
IntegerMatrix dilate_cpp(IntegerMatrix segim, IntegerMatrix kern, IntegerVector expand, int nthreads);
RcppExport SEXP _ProFound_dilate_cpp(SEXP segimSEXP, SEXP kernSEXP, SEXP expandSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type segim(segimSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type kern(kernSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type expand(expandSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(dilate_cpp(segim, kern, expand, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// profoundEllipCover
NumericVector profoundEllipCover(NumericVector x, NumericVector y, double cx, double cy, double rad, double ang, double axrat, int depth, int nthreads);
RcppExport SEXP _ProFound_profoundEllipCover(SEXP xSEXP, SEXP ySEXP, SEXP cxSEXP, SEXP cySEXP, SEXP radSEXP, SEXP angSEXP, SEXP axratSEXP, SEXP depthSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< double >::type cy(cySEXP);
    Rcpp::traits::input_parameter< double >::type rad(radSEXP);
    Rcpp::traits::input_parameter< double >::type ang(angSEXP);
    Rcpp::traits::input_parameter< double >::type axrat(axratSEXP);
    Rcpp::traits::input_parameter< int >::type depth(depthSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(profoundEllipCover(x, y, cx, cy, rad, ang, axrat, depth, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// profoundEllipWeight
NumericMatrix profoundEllipWeight(NumericMatrix image, NumericVector cx, NumericVector cy, NumericVector rad, NumericVector ang, NumericVector axrat, int depth, int nthreads);
RcppExport SEXP _ProFound_profoundEllipWeight(SEXP imageSEXP, SEXP cxSEXP, SEXP cySEXP, SEXP radSEXP, SEXP angSEXP, SEXP axratSEXP, SEXP depthSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type image(imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cy(cySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rad(radSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ang(angSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type axrat(axratSEXP);
    Rcpp::traits::input_parameter< int >::type depth(depthSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(profoundEllipWeight(image, cx, cy, rad, ang, axrat, depth, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// profoundEllipFlux
NumericVector profoundEllipFlux(NumericMatrix image, NumericVector cx, NumericVector cy, NumericVector rad, NumericVector ang, NumericVector axrat, bool deblend, int depth, int nthreads);
RcppExport SEXP _ProFound_profoundEllipFlux(SEXP imageSEXP, SEXP cxSEXP, SEXP cySEXP, SEXP radSEXP, SEXP angSEXP, SEXP axratSEXP, SEXP deblendSEXP, SEXP depthSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type image(imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cy(cySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rad(radSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ang(angSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type axrat(axratSEXP);
    Rcpp::traits::input_parameter< bool >::type deblend(deblendSEXP);
    Rcpp::traits::input_parameter< int >::type depth(depthSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(profoundEllipFlux(image, cx, cy, rad, ang, axrat, deblend, depth, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// profoundPolyCover
NumericVector profoundPolyCover(NumericVector x, NumericVector y, NumericVector poly_x, NumericVector poly_y, int depth, int nthreads);
RcppExport SEXP _ProFound_profoundPolyCover(SEXP xSEXP, SEXP ySEXP, SEXP poly_xSEXP, SEXP poly_ySEXP, SEXP depthSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type poly_x(poly_xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type poly_y(poly_ySEXP);
    Rcpp::traits::input_parameter< int >::type depth(depthSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(profoundPolyCover(x, y, poly_x, poly_y, depth, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// profoundPolyFlux
double profoundPolyFlux(NumericMatrix image, NumericVector poly_x, NumericVector poly_y, int depth, int nthreads);
RcppExport SEXP _ProFound_profoundPolyFlux(SEXP imageSEXP, SEXP poly_xSEXP, SEXP poly_ySEXP, SEXP depthSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type image(imageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type poly_x(poly_xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type poly_y(poly_ySEXP);
    Rcpp::traits::input_parameter< int >::type depth(depthSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(profoundPolyFlux(image, poly_x, poly_y, depth, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// Cadacs_MakeSkyGrid
void Cadacs_MakeSkyGrid(Rcpp::NumericMatrix image, Rcpp::NumericMatrix sky, Rcpp::NumericMatrix skyRMS, Rcpp::Nullable<Rcpp::IntegerMatrix> objects, Rcpp::Nullable<Rcpp::IntegerMatrix> mask, const int box1, const int box2, const int grid1, const int grid2, const int boxadd1, const int boxadd2, const int type, const int skypixmin, const int boxiters, const int doclip, const int skytype, const int skyRMStype, const double sigmasel, int nthreads);
RcppExport SEXP _ProFound_Cadacs_MakeSkyGrid(SEXP imageSEXP, SEXP skySEXP, SEXP skyRMSSEXP, SEXP objectsSEXP, SEXP maskSEXP, SEXP box1SEXP, SEXP box2SEXP, SEXP grid1SEXP, SEXP grid2SEXP, SEXP boxadd1SEXP, SEXP boxadd2SEXP, SEXP typeSEXP, SEXP skypixminSEXP, SEXP boxitersSEXP, SEXP doclipSEXP, SEXP skytypeSEXP, SEXP skyRMStypeSEXP, SEXP sigmaselSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type image(imageSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type sky(skySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type skyRMS(skyRMSSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerMatrix> >::type objects(objectsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerMatrix> >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< const int >::type box1(box1SEXP);
    Rcpp::traits::input_parameter< const int >::type box2(box2SEXP);
    Rcpp::traits::input_parameter< const int >::type grid1(grid1SEXP);
    Rcpp::traits::input_parameter< const int >::type grid2(grid2SEXP);
    Rcpp::traits::input_parameter< const int >::type boxadd1(boxadd1SEXP);
    Rcpp::traits::input_parameter< const int >::type boxadd2(boxadd2SEXP);
    Rcpp::traits::input_parameter< const int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const int >::type skypixmin(skypixminSEXP);
    Rcpp::traits::input_parameter< const int >::type boxiters(boxitersSEXP);
    Rcpp::traits::input_parameter< const int >::type doclip(doclipSEXP);
    Rcpp::traits::input_parameter< const int >::type skytype(skytypeSEXP);
    Rcpp::traits::input_parameter< const int >::type skyRMStype(skyRMStypeSEXP);
    Rcpp::traits::input_parameter< const double >::type sigmasel(sigmaselSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Cadacs_MakeSkyGrid(image, sky, skyRMS, objects, mask, box1, box2, grid1, grid2, boxadd1, boxadd2, type, skypixmin, boxiters, doclip, skytype, skyRMStype, sigmasel, nthreads);
    return R_NilValue;
END_RCPP
}
// profoundSegimFlux
NumericVector profoundSegimFlux(NumericMatrix image, NumericMatrix segim, int nthreads);
RcppExport SEXP _ProFound_profoundSegimFlux(SEXP imageSEXP, SEXP segimSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type image(imageSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type segim(segimSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(profoundSegimFlux(image, segim, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// water_cpp
Rcpp::IntegerMatrix water_cpp(Rcpp::NumericVector image, const int nx, const int ny, const double abstol, const double reltol, const double cliptol, const int ext, const double skycut, const int pixcut, const bool verbose, const int Ncheck, int nthreads);
RcppExport SEXP _ProFound_water_cpp(SEXP imageSEXP, SEXP nxSEXP, SEXP nySEXP, SEXP abstolSEXP, SEXP reltolSEXP, SEXP cliptolSEXP, SEXP extSEXP, SEXP skycutSEXP, SEXP pixcutSEXP, SEXP verboseSEXP, SEXP NcheckSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type image(imageSEXP);
    Rcpp::traits::input_parameter< const int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< const int >::type ny(nySEXP);
    Rcpp::traits::input_parameter< const double >::type abstol(abstolSEXP);
    Rcpp::traits::input_parameter< const double >::type reltol(reltolSEXP);
    Rcpp::traits::input_parameter< const double >::type cliptol(cliptolSEXP);
    Rcpp::traits::input_parameter< const int >::type ext(extSEXP);
    Rcpp::traits::input_parameter< const double >::type skycut(skycutSEXP);
    Rcpp::traits::input_parameter< const int >::type pixcut(pixcutSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const int >::type Ncheck(NcheckSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(water_cpp(image, nx, ny, abstol, reltol, cliptol, ext, skycut, pixcut, verbose, Ncheck, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// addmat
NumericMatrix addmat(NumericMatrix base, NumericMatrix add, IntegerVector xlim, IntegerVector ylim);
RcppExport SEXP _ProFound_addmat(SEXP baseSEXP, SEXP addSEXP, SEXP xlimSEXP, SEXP ylimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type base(baseSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type add(addSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type xlim(xlimSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ylim(ylimSEXP);
    rcpp_result_gen = Rcpp::wrap(addmat(base, add, xlim, ylim));
    return rcpp_result_gen;
END_RCPP
}
// order_cpp
IntegerVector order_cpp(NumericVector x);
RcppExport SEXP _ProFound_order_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(order_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// tabulate_cpp
IntegerVector tabulate_cpp(const IntegerVector& x, const int max);
RcppExport SEXP _ProFound_tabulate_cpp(SEXP xSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(tabulate_cpp(x, max));
    return rcpp_result_gen;
END_RCPP
}
// water_cpp_old
IntegerVector water_cpp_old(const NumericVector image, const int nx, const int ny, const double abstol, const double reltol, const double cliptol, const int ext, const double skycut, const int pixcut, const bool verbose, const int Ncheck);
RcppExport SEXP _ProFound_water_cpp_old(SEXP imageSEXP, SEXP nxSEXP, SEXP nySEXP, SEXP abstolSEXP, SEXP reltolSEXP, SEXP cliptolSEXP, SEXP extSEXP, SEXP skycutSEXP, SEXP pixcutSEXP, SEXP verboseSEXP, SEXP NcheckSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type image(imageSEXP);
    Rcpp::traits::input_parameter< const int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< const int >::type ny(nySEXP);
    Rcpp::traits::input_parameter< const double >::type abstol(abstolSEXP);
    Rcpp::traits::input_parameter< const double >::type reltol(reltolSEXP);
    Rcpp::traits::input_parameter< const double >::type cliptol(cliptolSEXP);
    Rcpp::traits::input_parameter< const int >::type ext(extSEXP);
    Rcpp::traits::input_parameter< const double >::type skycut(skycutSEXP);
    Rcpp::traits::input_parameter< const int >::type pixcut(pixcutSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const int >::type Ncheck(NcheckSEXP);
    rcpp_result_gen = Rcpp::wrap(water_cpp_old(image, nx, ny, abstol, reltol, cliptol, ext, skycut, pixcut, verbose, Ncheck));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ProFound_interpolateAkimaGrid", (DL_FUNC) &_ProFound_interpolateAkimaGrid, 4},
    {"_ProFound_interpolateLinearGrid", (DL_FUNC) &_ProFound_interpolateLinearGrid, 4},
    {"_ProFound_profoundAperCover", (DL_FUNC) &_ProFound_profoundAperCover, 7},
    {"_ProFound_profoundAperWeight", (DL_FUNC) &_ProFound_profoundAperWeight, 6},
    {"_ProFound_profoundAperFlux", (DL_FUNC) &_ProFound_profoundAperFlux, 7},
    {"_ProFound_dilate_cpp", (DL_FUNC) &_ProFound_dilate_cpp, 4},
    {"_ProFound_profoundEllipCover", (DL_FUNC) &_ProFound_profoundEllipCover, 9},
    {"_ProFound_profoundEllipWeight", (DL_FUNC) &_ProFound_profoundEllipWeight, 8},
    {"_ProFound_profoundEllipFlux", (DL_FUNC) &_ProFound_profoundEllipFlux, 9},
    {"_ProFound_profoundPolyCover", (DL_FUNC) &_ProFound_profoundPolyCover, 6},
    {"_ProFound_profoundPolyFlux", (DL_FUNC) &_ProFound_profoundPolyFlux, 5},
    {"_ProFound_Cadacs_MakeSkyGrid", (DL_FUNC) &_ProFound_Cadacs_MakeSkyGrid, 19},
    {"_ProFound_profoundSegimFlux", (DL_FUNC) &_ProFound_profoundSegimFlux, 3},
    {"_ProFound_water_cpp", (DL_FUNC) &_ProFound_water_cpp, 12},
    {"_ProFound_addmat", (DL_FUNC) &_ProFound_addmat, 4},
    {"_ProFound_order_cpp", (DL_FUNC) &_ProFound_order_cpp, 1},
    {"_ProFound_tabulate_cpp", (DL_FUNC) &_ProFound_tabulate_cpp, 2},
    {"_ProFound_water_cpp_old", (DL_FUNC) &_ProFound_water_cpp_old, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_ProFound(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
